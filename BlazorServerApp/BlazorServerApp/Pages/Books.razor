@page "/books"
@using BlazorServerApp.Data
@using BlazorServerApp.Services
@using CuriousDriveRazorLibrary
@using Blazored.LocalStorage
@using BlazorServerApp.Shared
@inject IBookStoresService<Book> bookStoresService
@inject IBookStoresService<BookUser> bookUserService
@inject AuthenticationStateProvider provider
@inject IUserService userService
@inject ILocalStorageService localStorageService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="col-12">

    <h3><b>Books</b></h3>
    <SpinLoader IsLoading="isLoading">
        <LoadingTemplate>
            <div class="col-12" style="background-color: lightgray; height:400px; vertical-align:middle">
                <br /><br />
                <Chase Center="true" Color="#c21f13" Size="70px"></Chase>
            </div>
        </LoadingTemplate>
        <ContentTemplate>
            @if (filteredBookList != null)
            {
                <GridView Items="filteredBookList" ReloadList="IsGridViewFiltered">
                    <GridColumns>
                        <GridColumn ColumnTitle="Title"
                                    OnSearchTextChanged="@(e => OnBooksrSearchTextChanged(e, "Title"))"></GridColumn>
                        <GridColumn ColumnTitle="Notes"
                                    OnSearchTextChanged="@(e => OnBooksrSearchTextChanged(e, "Notes"))"></GridColumn>
                        <GridColumn ColumnTitle="Types"
                                    OnSearchTextChanged="@(e => OnBooksrSearchTextChanged(e, "Types"))"></GridColumn>
                        <GridColumn ColumnTitle="Price"
                                    OnSearchTextChanged="@(e => OnBooksrSearchTextChanged(e, "Price"))"></GridColumn>
                        <GridColumn ColumnTitle="PublishedDate"
                                    OnSearchTextChanged="@(e => OnBooksrSearchTextChanged(e, "PublishedDate"))"></GridColumn>
                        <GridColumn ColumnTitle="Quantity"
                                    OnSearchTextChanged="@(e => OnBooksrSearchTextChanged(e, "book_quantity"))"></GridColumn>
                        <GridColumn ColumnTitle="Penalty"
                                    OnSearchTextChanged="@(e => OnBooksrSearchTextChanged(e, "penalty_amount"))"></GridColumn>
                        <GridColumn ColumnTitle="Actions"></GridColumn>
                    </GridColumns>
                    <GridRow Context="book">
                        <td>@book.Title</td>
                        <td>@book.Notes</td>
                        <td>@book.Type</td>
                        <td>@book.Price</td>
                        <td>@book.PublishedDate.ToString("d")</td>
                        <td>@book.book_quantity</td>
                        <td>@book.penalty_amount</td>
                        <td>
                            <button @onclick="async() => await TakeBook(book)">Take</button>
                        </td>


                    </GridRow>
                </GridView>}
        </ContentTemplate>
    </SpinLoader>
</div>

@code { public Book book { get; set; }
    public List<Book> bookList { get; set; }
    public List<Book> filteredBookList { get; set; }
    public string SelectedCity { get; set; }

    public bool IsVisible { get; set; }
    public bool Result { get; set; }
    public string RecordName { get; set; }
    public string[] Cities { get; set; }
    public bool IsGridViewFiltered { get; set; }
    bool isLoading = true;

    ElementReference firstNameTextBox;

    protected override void OnInitialized()
    {
        Console.WriteLine("Books - OnInitialized");
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Books - OnInitializedAsync");

        book = new Book();
        bookList = new List<Book>();
        //authorList = await authorService.GetAuthors();

        await base.OnInitializedAsync();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Books - OnParametersSet");
        base.OnParametersSet();
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Books - OnParametersSetAsync");
        await base.OnParametersSetAsync();
    }

    protected override bool ShouldRender()
    {
        base.ShouldRender();
        Console.WriteLine("Books - ShouldRender");

        return true;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("Books - OnAfterRender - firstRender = " + firstRender);
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine("Books - OnAfterRenderAsync - firstRender = " + firstRender);

        if (firstRender)
        {
            await LoadBooks();

            isLoading = false;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        Console.WriteLine("Books - Dispose");
    }

    private async Task LoadBooks()
    {
        await Task.Delay(500);

        bookList = filteredBookList = await bookStoresService.GetAllAsync("books/GetBooks");//http запити
        if (bookList == null)
        {
            RefreshRequest refreshRequest = new RefreshRequest();
            refreshRequest.AccessToken = await localStorageService.GetItemAsync<string>("accessToken");
            refreshRequest.RefreshToken = await localStorageService.GetItemAsync<string>("refreshToken");

            var user1 = await userService.RefreshTokenAsync(refreshRequest);
            await localStorageService.SetItemAsync("accessToken", user1.AccessToken);

            bookList = filteredBookList = await bookStoresService.GetAllAsync("books/GetBooks");
        }

        StateHasChanged();
    }



    private void OnBooksrSearchTextChanged(ChangeEventArgs changeEventArgs, string columnTitle)
    {
        string searchText = changeEventArgs.Value.ToString();
        IsGridViewFiltered = true;
        if (searchText != null)
        {
            switch (columnTitle)
            {
                case "Title":
                    filteredBookList = bookList.Where(auth => auth.Title.ToString().Contains(searchText)).ToList();
                    break;
                case "Notes":
                    filteredBookList = bookList.Where(auth => auth.Notes.ToString().Contains(searchText)).ToList();
                    break;
                case "Types":
                    filteredBookList = bookList.Where(auth => auth.Type.ToString().Contains(searchText)).ToList();
                    break;
                case "Price":
                    filteredBookList = bookList.Where(auth => auth.Price.ToString().Contains(searchText)).ToList();
                    break;
                case "PublishedDate":
                    filteredBookList = bookList.Where(auth => auth.PublishedDate.ToString().Contains(searchText)).ToList();
                    break;
                default:
                    Console.WriteLine("Default case");
                    break;
            }
        }


    }

    async Task TakeBook(Book book)
    {
        if (book.book_quantity <= 0)
            return;
        BookUser bookUser = new BookUser();
        bookUser.BookId = book.BookId;
        var state = await provider.GetAuthenticationStateAsync();
        bookUser.UserId = int.Parse(state.User.FindFirst("id").Value);
        bookUser.Dataofloan = DateTime.Now;
        bookUser.Deadline = bookUser.Dataofloan.Value.AddDays(7);
        try
        {
            await bookUserService.SaveAsync("books/TakeBook", bookUser);
            book.book_quantity--;
            await bookStoresService.UpdateAsync("books/UpdateBook/", book.BookId, book);
        }
        catch
        {
        }
    }
}

